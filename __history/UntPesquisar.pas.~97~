unit UntPesquisar;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, DB, Grids, DBGrids, StdCtrls, Mask, DBCtrls, ExtCtrls, Menus,
  ComCtrls, GIFImg, Buttons, ComObj;

type
  TForm1 = class(TForm)
    btnPesquisa: TButton;
    btnNovo: TButton;
    btnExcluir: TButton;
    ComboBox1: TComboBox;
    edPesquisa: TEdit;
    DBGrid1: TDBGrid;
    DataSource1: TDataSource;
    btnEditar: TButton;
    Panel1: TPanel;
    MainMenu1: TMainMenu;
    relatorio: TMenuItem;
    relPrestadorUnidade: TMenuItem;
    ProgressBar1: TProgressBar;
    btnExportarPdf: TBitBtn;
    btnExportarExcel: TBitBtn;
    Image1: TImage;
    procedure btnPesquisaClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure btnEditarClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure DBGrid1CellClick(Column: TColumn);
    procedure relPrestadorUnidadeClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnExportarExcelClick(Sender: TObject);
  private
    { Private declarations }
    procedure exportarExcel();
  public
    { Public declarations }
    sLocal: String
  end;

var
  Form1: TForm1;


implementation

uses UntDmCadastro, UntCadastro, UntEditarMorador, Thread, ThreadLoading,
  ThreadGif;

var
  TPesquisar: ThreadTeste;
  TExcel : ThreadLoad;

{$R *.dfm}

procedure TForm1.btnEditarClick(Sender: TObject);
begin
 frmEditar.ShowModal;
end;

procedure TForm1.btnExcluirClick(Sender: TObject);
begin
  if dmCadastro.cdsPesquisaPrestador.IsEmpty then
  begin
    ShowMessage('Não há registros');
    dmCadastro.cdsPesquisaPrestador.Close;
  end
  else
    if MessageDlg('Deseja Excluir o registro?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
    begin
      DBGrid1.SelectedField.DataSet.Delete;
      dmCadastro.cdsPesquisaPrestador.ApplyUpdates(0);
      dmCadastro.cdsPesquisaPrestador.Close;
      dmCadastro.cdsPesquisaPrestador.Open;
      dmCadastro.cdsPesquisaPrestador.Refresh;
    end;
end;

procedure TForm1.btnExportarExcelClick(Sender: TObject);
var
 linha, coluna: Integer;
  planilha: variant;
  valorCampo: string;
  t : TThread;
begin

   Image1.Visible := true;
   (Image1.Picture.Graphic as TGIFImage).Animate := true;

    TExcel := ThreadLoad.Create(exportarExcel);
    TExcel.Resume;
end;

procedure TForm1.btnNovoClick(Sender: TObject);
begin
  frmCadastro.ShowModal;
end;

procedure TForm1.btnPesquisaClick(Sender: TObject);
var SQL : String;
var tpg : ThreadTeste;
begin
  if dmCadastro.qryPesquisaPrestador.Active then
  dmCadastro.qryPesquisaPrestador.Close;

  // executando a Thread
//  ThreadTeste.Cria();

//condição para diferenciar o tipo selecionado do combobox
  if Form1.ComboBox1.ItemIndex = 0 then
    begin
      dmCadastro.qryPesquisaPrestador.SQL.Clear;
      SQL := 'select * from tab_prestador where nm_prestador like' + QuotedStr(Form1.edPesquisa.Text + '%');
      DmCadastro.cdsPesquisaPrestador.Close;
      DmCadastro.qryPesquisaPrestador.Close;
      DmCadastro.qryPesquisaPrestador.SQL.Clear;
      DmCadastro.qryPesquisaPrestador.SQL.Add(SQL);
      DmCadastro.cdsPesquisaPrestador.Open;

      if dmCadastro.cdsPesquisaPrestador.RecordCount < 1 then
      begin
        Application.MessageBox(
        'Não foi encontrado nenhum visitante com o nome informado.',
        'Atenção', MB_ICONWARNING);
        Exit;
      end;
    end
  else if Form1.ComboBox1.ItemIndex = 1 then
    begin
      dmCadastro.qryPesquisaPrestador.SQL.Clear;
      SQL := 'select * from tab_prestador where nr_rg like ' + QuotedStr(Form1.edPesquisa.Text + '%');
      DmCadastro.cdsPesquisaPrestador.Close;
      DmCadastro.qryPesquisaPrestador.Close;
      DmCadastro.qryPesquisaPrestador.SQL.Clear;
      DmCadastro.qryPesquisaPrestador.SQL.Add(SQL);
      DmCadastro.cdsPesquisaPrestador.Open;

      if dmCadastro.cdsPesquisaPrestador.RecordCount < 1 then
      begin
        Application.MessageBox(
        'Não foi encontrado nenhum visitante com o RG informado.',
        'Atenção', MB_ICONWARNING);
        Exit;
      end;
    end
  else if Form1.ComboBox1.ItemIndex = 2 then
    begin
      dmCadastro.qryPesquisaPrestador.SQL.Clear;
      SQL := 'select * from tab_prestador where nm_unidade like ' + QuotedStr(Form1.edPesquisa.Text + '%');
      DmCadastro.cdsPesquisaPrestador.Close;
      DmCadastro.qryPesquisaPrestador.Close;
      DmCadastro.qryPesquisaPrestador.SQL.Clear;
      DmCadastro.qryPesquisaPrestador.SQL.Add(SQL);
      DmCadastro.cdsPesquisaPrestador.Open;

      if dmCadastro.cdsPesquisaPrestador.RecordCount < 1 then
      begin
        Application.MessageBox(
        'Não foi encontrado nenhum visitante com a Unidade informada.',
        'Atenção', MB_ICONWARNING);
        Exit;
      end;
  end
  else if Form1.ComboBox1.ItemIndex = -1 then
    begin
      dmCadastro.qryPesquisaPrestador.SQL.Clear;
      SQL := 'select * from tab_prestador';
      DmCadastro.cdsPesquisaPrestador.Close;
      DmCadastro.qryPesquisaPrestador.Close;
      DmCadastro.qryPesquisaPrestador.SQL.Clear;
      DmCadastro.qryPesquisaPrestador.SQL.Add(SQL);
      DmCadastro.cdsPesquisaPrestador.Open;
    end;
end;

procedure TForm1.DBGrid1CellClick(Column: TColumn);
begin
   //quando clicar em um item da grid mostrar o botão de editar
   btnEditar.Visible := true;
end;

procedure TForm1.exportarExcel;
var
  linha, coluna: Integer;
  planilha: variant;
  valorCampo: string;
begin
  planilha := CreateOleObject('Excel.Application');
  planilha.Workbooks.Add(1);
  planilha.Cells.Select;
  // planilha.Selection.NumberFormat := '@';
  planilha.caption := 'Exportação de prestadores';
  planilha.Visible := false;
  linha := 2;

  // colocando nome nas colunas
  planilha.Cells[1, 1] := 'NOME';
  planilha.Cells[1, 2] := 'RG';
  planilha.Cells[1, 3] := 'UNIDADE';

  dmcadastro.cdsPesquisaPrestador.First;

  // preenchendo colunas com os dados do banco

  begin
    try
      while not dmcadastro.cdsPesquisaPrestador.Eof do
      begin
        planilha.Cells[linha, 1] :=
          dmcadastro.cdsPesquisaPrestadorNM_PRESTADOR.AsString;
        planilha.Cells[linha, 2] :=
          dmcadastro.cdsPesquisaPrestadorNR_RG.AsString;
        planilha.Cells[linha, 3] :=
          dmcadastro.cdsPesquisaPrestadorNM_UNIDADE.AsString;
        linha := linha + 1;
        dmcadastro.cdsPesquisaPrestador.Next;
      end;
      planilha.columns.AutoFit;
      planilha.Visible := true;
    finally
      planilha := Unassigned;
    end;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
   //esconder o botão de editar quando iniciar o projeto
   btnEditar.Visible := false;
end;

procedure TForm1.FormShow(Sender: TObject);
begin
  (Image1.Picture.Graphic as TGIFImage).Animate := true;
// LOCAL DE EXECUÇÃO
  sLocal := ExtractFilePath(Application.ExeName);

  dmCadastro.cdsPesquisaPrestador.Close;
end;

procedure TForm1.relPrestadorUnidadeClick(Sender: TObject);
var
SQL : string;
begin
  dmCadastro.cdsPesquisaPrestador.Close;
  dmCadastro.cdsPesquisaPrestador.Open;

  SQL := 'select * from tab_prestador';

  dmCadastro.cdsPesquisaPrestador.Close;
  dmCadastro.qryPesquisaPrestador.SQL.Clear;
  dmCadastro.qryPesquisaPrestador.SQL.Add(SQL);
  dmCadastro.cdsPesquisaPrestador.Open;

  dmCadastro.frxReportSelecionarPorUnidade.LoadFromFile
    (sLocal + '/Rave/FR_SELECIONAR_TODOS_PRESTADORES.fr3');

  dmCadastro.frxReportSelecionarPorUnidade.PrepareReport();
  dmCadastro.frxReportSelecionarPorUnidade.ShowReport();
end;

end.
