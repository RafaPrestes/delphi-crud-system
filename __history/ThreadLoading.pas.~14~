unit ThreadLoading;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, DB, Grids, DBGrids, StdCtrls, Mask, DBCtrls, ExtCtrls, Menus,
  ComCtrls, GIFImg, Buttons, ComObj;

type
   TProcedure = procedure of object;

  ThreadLoad = class(TThread)
  private
    { Private declarations }
     FOwnerForm: TForm;
  protected
    _proc: TProcedure;
    procedure Execute; override;
  public
    procedure pesquisarExcel();
    constructor Cria();
//    constructor Create(proc: TProcedure);
  end;

implementation

uses UntCadastro, UntDmCadastro, UntPesquisar;

{ 
  Important: Methods and properties of objects in visual components can only be
  used in a method called using Synchronize, for example,

      Synchronize(UpdateCaption);  

  and UpdateCaption could look like,

    procedure ThreadLoading.UpdateCaption;
    begin
      Form1.Caption := 'Updated in a thread';
    end; 
    
    or 
    
    Synchronize( 
      procedure 
      begin
        Form1.Caption := 'Updated in thread via an anonymous method' 
      end
      )
    );
    
  where an anonymous method is passed.
  
  Similarly, the developer can call the Queue method with similar parameters as 
  above, instead passing another TThread class as the first parameter, putting
  the calling thread in a queue with the other thread.

}

{ ThreadLoading }

//constructor ThreadLoad.Create(proc: TProcedure);
//begin
//  inherited Create(False);
//  FreeOnTerminate := False;
//  _proc := proc;
//end;

constructor ThreadLoad.Cria;
begin
  Create(false);
  FreeOnTerminate := true;
end;

procedure ThreadLoad.Execute;
begin
   Synchronize(pesquisarExcel);
end;


procedure ThreadLoad.pesquisarExcel;
var
planilha : variant;
linha: integer;
begin
    // criando o excel
    planilha := CreateOleObject('Excel.Application');
    planilha.Workbooks.Add(1);
    planilha.Cells.Select;
    // planilha.Selection.NumberFormat := '@';
    planilha.Caption := 'Relatorio de Acesso Prestador';
    planilha.Visible := false;
    linha := 2;

    // colocando nome nas colunas
    planilha.Cells[1, 1] := 'UNIDADE';
    planilha.Cells[1, 2] := 'PROPRIETARIO';
    planilha.Cells[1, 3] := 'NOME';
    planilha.Cells[1, 4] := 'RG';
    planilha.Cells[1, 5] := 'CLASSIFICAÇÃO';
    planilha.Cells[1, 6] := 'EMAIL';

    dmCadastro.cdsPesquisaPrestador.First;

  // preenchendo colunas com os dados do banco
    try
      while not dmCadastro.cdsPesquisaPrestador.eof do
      begin
        planilha.Cells[linha, 1] :=
          dmCadastro.cdsPesquisaPrestadorNM_PRESTADOR.AsString;
        planilha.Cells[linha, 2] :=
          dmCadastro.cdsPesquisaPrestadorNR_RG.AsString;
        planilha.Cells[linha, 3] :=
         dmCadastro.cdsPesquisaPrestadorNM_UNIDADE.AsString;
        linha := linha + 1;
        dmCadastro.cdsPesquisaPrestador.Next;
      end;
      planilha.Columns.AutoFit;
      planilha.Visible := true;
    finally
      planilha := Unassigned;
    end;
end;

end.
